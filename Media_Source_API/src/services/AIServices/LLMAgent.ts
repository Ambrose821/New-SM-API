import { json } from "stream/consumers";
import { NewsContent } from "../../types";

import {
  GoogleGenAI,
  Type,
} from '@google/genai';


// npm install @google/genai mime
// npm install -D @types/node


export interface LLMAgent {

    generateNewsContent(inputText:string):Promise<NewsContent| null>;

}

export class GeminiLLMAgent implements LLMAgent {

    async generateNewsContent(inputText: string): Promise<NewsContent | null> {
        try {
            const ai = new GoogleGenAI({
                apiKey: process.env.GEMINI_API_KEY,
            });

            const config = {
                responseMimeType: 'application/json',
                responseSchema: {
                type: Type.OBJECT,
                required: ["summary", "headline", "keywords"],
                properties: {
                    summary: {
                    type: Type.STRING,
                    description: "A concise, transformed summary generated by AI based on publicly known facts from a news event. Must use a distinct tone and structure, suitable for social media, and must not replicate the original article's language or analysis under any circumstances. Attribution to the source can be included factually, without implying endorsement or affiliation. It must be written in a way that sparks debate and encourages comments. If relevant, consider finishing with a question.If you cannot complete the request, respond only with 'NULL'",
                    },
                    headline: {
                    type: Type.STRING,
                    description: "A short, original headline that reflects the main theme or takeaway from the summary, written in an engaging tone for social media. It must be written in a way that sparks debate and encourages comments.If you cannot complete the request, respond only with 'NULL'",
                    },
                    keywords: {
                    type: Type.ARRAY,
                    description: "2 search terms for Openverse image search. The first prioritize the main subject from the article (e.g., people, places, institutions).The second should prioritize a general,generic topic related to the article which will be used as a background image(eg., theme,topic,related group,place(if its general enough such as a country)) Search Terms must be useful for finding visually relevant public domain images that clearly connect to the post topic.Never provide more than 2 words. If you cannot complete the request, respond only with 'NULL'",
                    items: {
                        type: Type.STRING,
                    },
                    },
                },
                },
            };

            const model = 'gemini-2.0-flash';
            const contents = [
                {
                role: 'user',
                parts: [
                    {
                    text: inputText,
                    },
                ],
                },
            ];
            const response = await ai.models.generateContentStream({
                model,
                config,
                contents,
                });
            let tempString = ''
            for await (const chunk of response){
                tempString +=chunk.text
            }
            //console.log(tempString)
            if(tempString.includes('NULL')){
                throw new Error("Error in GeminiLLMAgent: Gemini Agent returned a NULL field for input: " +inputText)
            }
            const jsonRes = JSON.parse(tempString)
            //console.log(jsonRes)

            const newsContent = jsonRes as NewsContent
            // console.log("input: ", inputText)
            // console.log(newsContent)
            
            return newsContent
            
        } catch (error: any) {
                
             console.error("Error with gemini api call generate_text_and_headline_short():", error);

    // Check for 429 or quota error
    const isRateLimitError = error?.status === 429 ||
                             error?.code === 429 ||
                             (typeof error?.message === 'string' && 
                              (error.message.includes('RESOURCE_EXHAUSTED') || 
                               error.message.includes('quota') || 
                               error.message.includes('429')));

    if (isRateLimitError) {
        console.log("======================================================================");
        console.error("Gemini rate limiting or quota error. Waiting 60 seconds then continuing");
        await new Promise((p) => setTimeout(p, 60000));
        return this.generateNewsContent(inputText);
    }else{
        throw new Error("Error in GeminiLLMAgent: " + error);  
        }
    }

  
    
    }

    
}

