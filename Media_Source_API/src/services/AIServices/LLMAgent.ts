import { json } from "stream/consumers";
import { NewsContent } from "../../types";

import {
  GoogleGenAI,
  Type,
} from '@google/genai';


// npm install @google/genai mime
// npm install -D @types/node


export interface LLMAgent {

    generateNewsContent(inputText:string):Promise<NewsContent| null>;

}

export class GeminiLLMAgent implements LLMAgent {

    async generateNewsContent(inputText: string): Promise<NewsContent | null> {
        try {
            const ai = new GoogleGenAI({
                apiKey: process.env.GEMINI_API_KEY,
            });

            const config = {
                responseMimeType: 'application/json',
                responseSchema: {
                type: Type.OBJECT,
                required: ["summary", "headline", "keywords"],
                properties: {
                    summary: {
                    type: Type.STRING,
                    description: "A concise, transformed summary generated by AI based on publicly known facts from a news event. Must use a distinct tone and structure, suitable for social media, and must not replicate the original article's language or analysis under any circumstances. Attribution to the source can be included factually, without implying endorsement or affiliation. It must be written in a way that sparks debate and encourages comments. If relevant, consider finishing with a question.If you cannot complete the request, respond only with 'NULL'",
                    },
                    headline: {
                    type: Type.STRING,
                    description: "A short, original headline that reflects the main theme or takeaway from the summary, written in an engaging tone for social media. It must be written in a way that sparks debate and encourages comments.If you cannot complete the request, respond only with 'NULL'"
                  
                  },
                    keywords: {
                    type: Type.ARRAY,
                    description: `KEYWORDS RULES:
Return exactly 2 terms for Openverse/Pixabay.
k0 = specific subject (brand/org/person/place). For countries use "<country> logo" (not demonyms). Use exact proper names; full names for people; for cities use "<city> skyline" if apt, for brands "<brand name> logo" if apt.
k1 = generic scene matching theme (pick a common, visually clear scene).
Both terms: 1–2 words, nouns only, no punctuation, no duplicates.
Examples:
- political violence in Pakistan → ["Pakistan logo","protest"]
- Air Canada passenger disputes → ["Air Canada","airport counter"]
- Ukraine war update → ["Ukraine flag","soldier silhouette"]
Return JSON per schema.`,
                    items: {
                        type: Type.STRING,
                    },
                    },
                    highlightWords:{
                        type: Type.ARRAY,
                        description:"2-5 key words and/or names from the headline you just generate above.  These should be the most impactful, relevant, or emotionally charged words or phrases from your own headline, chosen to grab a reader's attention.",
                        items:{
                            type: Type.STRING
                        }
                    }
                },
                },
            };

            const model = 'gemini-2.5-flash';
            const contents = [
                {
                role: 'user',
                parts: [
                    {
                    text: inputText,
                    },
                ],
                },
            ];
            const response = await ai.models.generateContentStream({
                model,
                config,
                contents,
                });
            let tempString = ''
            for await (const chunk of response){
                tempString +=chunk.text
            }
            //console.log(tempString)
            if(tempString.includes('NULL')){
                throw new Error("Error in GeminiLLMAgent: Gemini Agent returned a NULL field for input: " +inputText)
            }
            const jsonRes = JSON.parse(tempString)
            //console.log(jsonRes)

            const newsContent = jsonRes as NewsContent
            // console.log("input: ", inputText)
            // console.log(newsContent)
            
            return newsContent
            
        } catch (error: any) {
                
             console.error("Error with gemini api call generate_text_and_headline_short():", error);

    // Check for 429 or quota error
    const isRateLimitError = error?.status === 429 ||
                             error?.code === 429 ||
                             (typeof error?.message === 'string' && 
                              (error.message.includes('RESOURCE_EXHAUSTED') || 
                               error.message.includes('quota') || 
                               error.message.includes('429')));

    if (isRateLimitError) {
        console.log("======================================================================");
        console.error("Gemini rate limiting or quota error. Waiting 60 seconds then continuing");
        await new Promise((p) => setTimeout(p, 60000));
        return this.generateNewsContent(inputText);
    }else{
        throw new Error("Error in GeminiLLMAgent: " + error);  
        }
    }

  
    
    }

    
}

